package student_mihails_nikolajevs.lesson_9.level_3_junior_.task_9_;


public class Optional {
/*
Найдите в интернете информацию про класс java.util.Optional.
Для чего применяются объекты этого класса?
Какие два состояния могут быть у объектов этого класса?
Как создаются экземпляры данного класса?
Как можно проверить в каком состоянии находится экземпляр данного класса?
Как можно получить объект, который находится внутри Optional?
 */
}
/*
 Инфо о классе java.util.Optional :

JDK 8 был введён новый утилитарный класс java.util.Optional,
целями которого являются повышение null-safety и читаемости кода при работе со ссылками,
значения которых могут быть null.
Главная же цель Optional — замена null-значений, благодаря чему должна повышаться безопасность и читаемость кода.
 Как бы то ни было, Optional не решает проблему NullPointerException полностью,
 но при правильном применении значительно снижает шансы возникновения этого исключения.
 При использовании Optional совместно с лямбда-выражениями код может выглядеть не совсем очевидно,
 что особенно хорошо видно по примеру с цепочкой из нескольких вызовов Optional.orElseGet(),
 но одновременно с этим код с использованием Optional в большинстве случаев будет выглядеть более логичным,
 чем с несколькими вложенными блоками if/else.

Методы создания

Объект типа Optional может быть создан тремя методами:

Optional.of — для создания Optional из не-null значения.
При передаче в качестве аргумента null будет выкинуто исключение NullPointerException.

Optional.ofNullable — для создания Optional из значения, которое может быть null.
Если значение не null, то будет создан Optional со значением, иначе — пустой Optional.

Optional.empty — для создания пустого Optional.
 */