Найдите в интернете информацию про класс java.util.Optional.
Для чего применяются объекты этого класса?

->целями java.util.Optional являются повышение null-safety и читаемости кода при работе со ссылками,
значения которых могут быть null. Главная же цель Optional — замена null-значений, благодаря чему должна
повышаться безопасность и читаемость кода.

Какие два состояния могут быть у объектов этого класса?

->Непустой Optional может быть преобразован в другой Optional, который может содержать
другое значение, значение другого типа или и вовсе быть пустым.

Как создаются экземпляры данного класса?

->Optional.of — для создания Optional из не-null значения.
При передаче в качестве аргумента null будет выкинуто исключение NullPointerException.

->Optional.ofNullable — для создания Optional из значения,
которое может быть null. Если значение не null, то будет создан Optional со значением, иначе — пустой Optional.

->Optional.empty — для создания пустого Optional.

Как можно проверить в каком состоянии находится экземпляр данного класса?

->Единственным до JDK 11 методом проверки наличия значения был isPresent, который возвращает true,
если объект Optional содержит значение, иначе — false.
  В JDK 11 был добавлен метод-антипод isEmpty, возвращающий true, если значение отсутствует.

Как можно получить объект, который находится внутри Optional?

->Метод get — простейший способ получения значения объекта Optional. Если Optional непустой, то он
вернёт значение, иначе выбросит исключение NoSuchElementException. Поэтому при обращении к этому методу
нужно либо проверять наличие значения при помощи Optional.isPresent(), либо использовать try/catch.
